package com.example.commit.viewmodel

import android.content.Context
import android.net.Uri
import android.util.Log
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.commit.connection.RetrofitAPI
import com.example.commit.connection.RetrofitClient
import com.example.commit.connection.RetrofitObject
import com.example.commit.connection.dto.SubmittedRequestFormsResponse
import com.example.commit.data.model.CommissionFormResponse
import com.example.commit.data.model.CommissionRequestSubmit
import com.example.commit.data.model.ImageUploadResponse
import com.example.commit.data.model.FormItem
import com.example.commit.data.model.OptionItem
import com.google.gson.Gson
import com.google.gson.JsonArray
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch
import okhttp3.MediaType.Companion.toMediaType
import okhttp3.MultipartBody
import okhttp3.RequestBody.Companion.asRequestBody
import android.webkit.MimeTypeMap
import java.io.File
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response
import com.google.gson.GsonBuilder
import okhttp3.ResponseBody



class CommissionFormViewModel : ViewModel() {

    private val _commissionFormState =
        MutableStateFlow<CommissionFormState>(CommissionFormState.Loading)
    val commissionFormState: StateFlow<CommissionFormState> = _commissionFormState.asStateFlow()

    private val _imageUploadState =
        MutableStateFlow<ImageUploadState>(ImageUploadState.Idle)
    val imageUploadState: StateFlow<ImageUploadState> = _imageUploadState.asStateFlow()

    private val _submitState =
        MutableStateFlow<SubmitState>(SubmitState.Idle)
    val submitState: StateFlow<SubmitState> = _submitState.asStateFlow()

    private val _uploadedImageUrls = MutableStateFlow<List<String>>(emptyList())
    val uploadedImageUrls: StateFlow<List<String>> = _uploadedImageUrls.asStateFlow()

    private val _isUploading = MutableStateFlow(false)
    val isUploading: StateFlow<Boolean> = _isUploading.asStateFlow()

    // ‚ñº Ï†úÏ∂úÎêú Ïã†Ï≤≠ÏÑú Î≥¥Í∏∞ ÏÉÅÌÉú
    private val _submittedFormState =
        MutableStateFlow<SubmittedFormState>(SubmittedFormState.Idle)
    val submittedFormState: StateFlow<SubmittedFormState> = _submittedFormState.asStateFlow()

    private val _submittedFormSchemaUi =
        MutableStateFlow<List<FormItem>>(emptyList())
    val submittedFormSchemaUi: StateFlow<List<FormItem>> = _submittedFormSchemaUi.asStateFlow()

    // üîπ Ïã†Í∑ú: Ï†úÏ∂úÎêú ÎãµÎ≥Ä(ÎùºÎ≤®->Í∞í) Îßµ
    private val _submittedFormAnswerUi =
        MutableStateFlow<Map<String, Any>>(emptyMap())
    val submittedFormAnswerUi: StateFlow<Map<String, Any>> = _submittedFormAnswerUi.asStateFlow()

    private var retrofitAPI: RetrofitAPI? = null
    private val gson = Gson()

    // ---------------------------------------------------------------------
    // Form ÏûëÏÑ±Ïö© Ïä§ÌÇ§Îßà Ï°∞Ìöå
    // ---------------------------------------------------------------------
    fun getCommissionForm(commissionId: String, context: Context) {
        viewModelScope.launch {
            try {
                _commissionFormState.value = CommissionFormState.Loading

                val prefs = context.getSharedPreferences("auth", Context.MODE_PRIVATE)
                val token = prefs.getString("accessToken", null)
                Log.d("CommissionFormViewModel", "ÌÜ†ÌÅ∞ ÌôïÏù∏: ${if (token.isNullOrEmpty()) "ÏóÜÏùå" else "ÏûàÏùå"}")

                if (token.isNullOrEmpty()) {
                    _commissionFormState.value =
                        CommissionFormState.Error("Ïù∏Ï¶ù ÌÜ†ÌÅ∞Ïù¥ ÏóÜÏäµÎãàÎã§. Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.")
                    return@launch
                }

                if (retrofitAPI == null) retrofitAPI = RetrofitObject.getRetrofitService(context)

                val response = retrofitAPI!!.getCommissionForm(commissionId)
                if (response.isSuccessful) {
                    val body = response.body()
                    Log.d("CommissionFormViewModel", "API ÏùëÎãµ: $body")
                    _commissionFormState.value = CommissionFormState.Success(body!!)
                } else {
                    _commissionFormState.value = when (response.code()) {
                        401 -> CommissionFormState.Error("Ïù∏Ï¶ùÏù¥ ÌïÑÏöîÌï©ÎãàÎã§. Îã§Ïãú Î°úÍ∑∏Ïù∏Ìï¥Ï£ºÏÑ∏Ïöî.")
                        403 -> CommissionFormState.Error("Ï†ëÍ∑º Í∂åÌïúÏù¥ ÏóÜÏäµÎãàÎã§.")
                        404 -> CommissionFormState.Error("Ïª§ÎØ∏ÏÖòÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.")
                        else -> CommissionFormState.Error("API Ìò∏Ï∂ú Ïã§Ìå®: ${response.code()}")
                    }
                }
            } catch (e: Exception) {
                _commissionFormState.value = CommissionFormState.Error("ÎÑ§Ìä∏ÏõåÌÅ¨ Ïò§Î•ò: ${e.message}")
            }
        }
    }

    // ---------------------------------------------------------------------
    // Ïù¥ÎØ∏ÏßÄ ÏóÖÎ°úÎìú
    // ---------------------------------------------------------------------
    private fun resolveMime(context: Context, uri: Uri): String {
        val fromResolver = context.contentResolver.getType(uri)
        val ext = MimeTypeMap.getFileExtensionFromUrl(uri.toString())
        val fromExt = ext?.let { MimeTypeMap.getSingleton().getMimeTypeFromExtension(it.lowercase()) }
        val mime = (fromResolver ?: fromExt ?: "image/jpeg")
        return if (mime == "image/jpg") "image/jpeg" else mime
    }

    private fun createUploadFile(context: Context, uri: Uri): Pair<File, String> {
        val allowed = setOf("image/jpeg", "image/png")
        val mime = resolveMime(context, uri)

        if (mime in allowed) {
            val ext = if (mime.endsWith("png")) "png" else "jpg"
            val out = File(context.cacheDir, "upload_${System.currentTimeMillis()}.$ext")
            context.contentResolver.openInputStream(uri)!!.use { input ->
                out.outputStream().use { output -> input.copyTo(output) }
            }
            return out to mime
        }

        val bmp = if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.P) {
            val src = android.graphics.ImageDecoder.createSource(context.contentResolver, uri)
            android.graphics.ImageDecoder.decodeBitmap(src)
        } else {
            @Suppress("DEPRECATION")
            android.provider.MediaStore.Images.Media.getBitmap(context.contentResolver, uri)
        }
        val outJpg = File(context.cacheDir, "upload_${System.currentTimeMillis()}.jpg")
        java.io.FileOutputStream(outJpg).use { fos ->
            bmp.compress(android.graphics.Bitmap.CompressFormat.JPEG, 92, fos)
        }
        return outJpg to "image/jpeg"
    }

    fun uploadImage(imageUri: Uri, context: Context) {
        viewModelScope.launch {
            try {
                _isUploading.value = true
                _imageUploadState.value = ImageUploadState.Loading

                if (retrofitAPI == null) retrofitAPI = RetrofitObject.getRetrofitService(context)

                val (file, mime) = createUploadFile(context, imageUri)
                val reqBody = file.asRequestBody(mime.toMediaType())
                val part = MultipartBody.Part.createFormData("image", file.name, reqBody)

                val response = retrofitAPI!!.uploadRequestImage(part)
                if (response.isSuccessful) {
                    val body = response.body()
                    val imageUrl = body?.success?.image_url
                    if (imageUrl != null) {
                        _uploadedImageUrls.value = _uploadedImageUrls.value + imageUrl
                        _imageUploadState.value = ImageUploadState.Success(body)
                        Log.d("ImageUpload", "ÏóÖÎ°úÎìú ÏÑ±Í≥µ: $imageUrl (mime=$mime, name=${file.name})")
                    } else {
                        _imageUploadState.value = ImageUploadState.Error("Ïù¥ÎØ∏ÏßÄ URLÏù¥ ÎπÑÏñ¥ ÏûàÏäµÎãàÎã§.")
                    }
                } else {
                    val err = response.errorBody()?.string()
                    Log.e("ImageUpload", "Ïã§Ìå® ${response.code()}, $err")
                    _imageUploadState.value = ImageUploadState.Error("ÏóÖÎ°úÎìú Ïã§Ìå®: ${response.code()}")
                }
            } catch (e: Exception) {
                Log.e("ImageUpload", "ÏòàÏô∏: ${e.message}", e)
                _imageUploadState.value = ImageUploadState.Error("ÏòàÏô∏: ${e.message}")
            } finally {
                _isUploading.value = false
            }
        }
    }

    // ---------------------------------------------------------------------
    // Ïã†Ï≤≠ÏÑú Ï†úÏ∂ú
    // ---------------------------------------------------------------------
    fun submitCommissionRequest(
        commissionId: String,
        answersByLabel: Map<String, Any>,
        context: Context
    ) {
        viewModelScope.launch {
            try {
                _submitState.value = SubmitState.Loading

                val prefs = context.getSharedPreferences("auth", Context.MODE_PRIVATE)
                val token = prefs.getString("accessToken", null)
                if (token.isNullOrEmpty()) {
                    _submitState.value = SubmitState.Error("Ïù∏Ï¶ùÏù¥ ÌïÑÏöîÌï©ÎãàÎã§.")
                    return@launch
                }

                if (retrofitAPI == null) retrofitAPI = RetrofitObject.getRetrofitService(context)

                val fields = (commissionFormState.value as? CommissionFormState.Success)
                    ?.data?.success?.formSchema?.fields.orEmpty()

                val formAnswer = mutableMapOf<String, @JvmSuppressWildcards Any>()
                fields.forEach { f ->
                    val key = f.id.toString()
                    when (f.type) {
                        "textarea", "radio", "check" -> {
                            val v = (answersByLabel[f.label] as? String)?.takeIf { it.isNotBlank() }
                            if (v != null) formAnswer[key] = v
                        }
                        "file", "image" -> {
                            val urls = uploadedImageUrls.value
                            if (urls.isNotEmpty()) formAnswer[key] = urls
                        }
                        else -> {
                            val v = (answersByLabel[f.label] as? String)?.takeIf { it.isNotBlank() }
                            if (v != null) formAnswer[key] = v
                        }
                    }
                }
                if (formAnswer.isEmpty()) formAnswer["1"] = "Ïã†Ï≤≠ ÎÇ¥Ïö©Ïù¥ ÏóÜÏäµÎãàÎã§"

                val request = CommissionRequestSubmit(formAnswer = formAnswer)
                Log.d("SubmitPayload", gson.toJson(request))

                val response = retrofitAPI!!.submitCommissionRequest(commissionId, request)
                if (response.isSuccessful) {
                    markApplicationSubmitted(commissionId, context)
                    val requestId = response.body()?.success?.request_id?.toString()
                    _submitState.value = SubmitState.Success(requestId)
                } else {
                    val errorBody = response.errorBody()?.string().orEmpty()
                    Log.e("SubmitError", "ÏÑúÎ≤Ñ ÏùëÎãµ: ${response.code()}, ÏóêÎü¨: $errorBody")
                    _submitState.value = when (response.code()) {
                        400 -> {
                            if (errorBody.contains("C010") || errorBody.contains("Ïù¥ÎØ∏ Ïã†Ï≤≠Ìïú Ïª§ÎØ∏ÏÖòÏûÖÎãàÎã§")) {
                                val existingId = Regex("\"existingRequestId\"\\s*:\\s*\"?(\\d+)\"?")
                                    .find(errorBody)?.groupValues?.getOrNull(1).orEmpty()
                                markApplicationSubmitted(commissionId, context)
                                if (existingId.isNotBlank()) {
                                    SubmitState.AlreadySubmitted(existingId)
                                } else {
                                    SubmitState.Error("Ïù¥ÎØ∏ Ïã†Ï≤≠Ìïú Ïª§ÎØ∏ÏÖòÏûÖÎãàÎã§")
                                }
                            } else {
                                SubmitState.Error(if (errorBody.isNotEmpty()) errorBody else "ÏûòÎ™ªÎêú ÏöîÏ≤≠ÏûÖÎãàÎã§.")
                            }
                        }
                        401 -> SubmitState.Error("Ïù∏Ï¶ùÏù¥ ÌïÑÏöîÌï©ÎãàÎã§.")
                        404 -> SubmitState.Error("Ïª§ÎØ∏ÏÖòÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.")
                        500 -> SubmitState.Error("ÏÑúÎ≤Ñ ÎÇ¥Î∂Ä Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§. Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.")
                        else -> SubmitState.Error("Ï†úÏ∂ú Ïã§Ìå®: ${response.code()}")
                    }
                }
            } catch (e: Exception) {
                _submitState.value = SubmitState.Error("ÎÑ§Ìä∏ÏõåÌÅ¨ Ïò§Î•ò: ${e.message}")
            }
        }
    }

    // ---------------------------------------------------------------------
    // Ï†úÏ∂ú Ïó¨Î∂Ä ÌôïÏù∏ (Î°úÏª¨ ÌîåÎûòÍ∑∏)
    // ---------------------------------------------------------------------
    fun checkApplicationStatus(
        commissionId: String,
        context: Context,
        onResult: (Boolean) -> Unit
    ) {
        viewModelScope.launch {
            try {
                val prefs = context.getSharedPreferences("auth", Context.MODE_PRIVATE)
                val token = prefs.getString("accessToken", null)

                if (token.isNullOrEmpty()) {
                    onResult(false); return@launch
                }
                if (retrofitAPI == null) retrofitAPI = RetrofitObject.getRetrofitService(context)

                val applicationKey = "commission_${commissionId}_submitted"
                val hasSubmitted = prefs.getBoolean(applicationKey, false)
                Log.d("CommissionFormViewModel", "Ïã†Ï≤≠ÏÑú ÏÉÅÌÉú ÌôïÏù∏: commissionId=$commissionId, hasSubmitted=$hasSubmitted")
                onResult(hasSubmitted)
            } catch (e: Exception) {
                Log.e("CommissionFormViewModel", "Ïã†Ï≤≠ÏÑú ÏÉÅÌÉú ÌôïÏù∏ Ïã§Ìå®: ${e.message}")
                onResult(false)
            }
        }
    }

    fun markApplicationSubmitted(commissionId: String, context: Context) {
        val prefs = context.getSharedPreferences("auth", Context.MODE_PRIVATE)
        val applicationKey = "commission_${commissionId}_submitted"
        prefs.edit().putBoolean(applicationKey, true).apply()
        Log.d("CommissionFormViewModel", "Ïã†Ï≤≠ÏÑú Ï†úÏ∂ú ÏôÑÎ£å ÌëúÏãú: $commissionId")
    }

    companion object {
        private const val TAG = "CommissionFormVM"
    }

/*
    // ---------------------------------------------------------------------
    // (Í∏∞Ï°¥) Ï†úÏ∂úÎêú Ïã†Ï≤≠ÏÑú Î≥¥Í∏∞ - commissionId Í∏∞Î∞ò (Ïä§ÌÇ§Îßà Ï†ÑÏö©)
    // ---------------------------------------------------------------------
    fun getSubmittedCommissionForm(commissionId: String, context: Context) {
        viewModelScope.launch {
            try {
                Log.d(TAG, "[getSubmittedCommissionForm] enter, commissionId=$commissionId")
                _submittedFormState.value = SubmittedFormState.Loading

                val prefs = context.getSharedPreferences("auth", Context.MODE_PRIVATE)
                val token = prefs.getString("accessToken", null)
                if (token.isNullOrEmpty()) {
                    _submittedFormState.value =
                        SubmittedFormState.Error("Ïù∏Ï¶ù ÌÜ†ÌÅ∞Ïù¥ ÏóÜÏäµÎãàÎã§. Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.")
                    return@launch
                }

                if (retrofitAPI == null) retrofitAPI = RetrofitObject.getRetrofitService(context)

                val call = retrofitAPI!!.getSubmittedCommissionForm(commissionId.toInt())
                call.enqueue(object :
                    Callback<RetrofitClient.ApiResponse<RetrofitClient.SubmittedFormData>> {

                    override fun onResponse(
                        call: Call<RetrofitClient.ApiResponse<RetrofitClient.SubmittedFormData>>,
                        response: Response<RetrofitClient.ApiResponse<RetrofitClient.SubmittedFormData>>
                    ) {
                        if (!response.isSuccessful) {
                            val msg = when (response.code()) {
                                401 -> "Ïù∏Ï¶ùÏù¥ ÌïÑÏöîÌï©ÎãàÎã§. Îã§Ïãú Î°úÍ∑∏Ïù∏Ìï¥Ï£ºÏÑ∏Ïöî."
                                403 -> "Ï†ëÍ∑º Í∂åÌïúÏù¥ ÏóÜÏäµÎãàÎã§."
                                404 -> "Î¶¨ÏÜåÏä§Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§."
                                else -> "API Ìò∏Ï∂ú Ïã§Ìå®: ${response.code()}"
                            }
                            _submittedFormState.value = SubmittedFormState.Error(msg)
                            return
                        }

                        val body = response.body()
                        val ok = body?.resultType == "SUCCESS" && body.success != null
                        if (!ok) {
                            _submittedFormState.value =
                                SubmittedFormState.Error("Ïã†Ï≤≠ÏÑú Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò§ÏßÄ Î™ªÌñàÏäµÎãàÎã§.")
                            return
                        }

                        _submittedFormState.value = SubmittedFormState.Success(body!!.success!!)
                        val successJson = gson.toJsonTree(body.success).asJsonObject
                        val fieldsJson = successJson
                            .getAsJsonObject("formSchema")
                            ?.getAsJsonArray("fields")
                        val mapped = mapSchemaFieldsToFormItems(fieldsJson)
                        _submittedFormSchemaUi.value = mapped
                        _submittedFormAnswerUi.value = emptyMap() // Ïù¥ APIÎäî ÎãµÎ≥Ä ÏóÜÏùå
                    }

                    override fun onFailure(
                        call: Call<RetrofitClient.ApiResponse<RetrofitClient.SubmittedFormData>>,
                        t: Throwable
                    ) {
                        _submittedFormState.value =
                            SubmittedFormState.Error("ÎÑ§Ìä∏ÏõåÌÅ¨ Ïò§Î•ò: ${t.message}")
                    }
                })
            } catch (e: Exception) {
                _submittedFormState.value = SubmittedFormState.Error("ÎÑ§Ìä∏ÏõåÌÅ¨ Ïò§Î•ò: ${e.message}")
            }
        }
    }
*/

    // ---------------------------------------------------------------------
    // Ï†úÏ∂úÎêú Ïã†Ï≤≠ÏÑú Î≥¥Í∏∞ - requestId Í∏∞Î∞ò (ÎãµÎ≥Ä + Ïù¥ÎØ∏ÏßÄ Ìè¨Ìï®)
    // ---------------------------------------------------------------------
    fun getSubmittedRequestForms(requestId: String, context: Context) {
        viewModelScope.launch {
            val tag = "getSubmittedRequestForms"
            try {
                Log.d(tag, "[enter] requestId=$requestId")
                _submittedFormState.value = SubmittedFormState.Loading

                val prefs = context.getSharedPreferences("auth", Context.MODE_PRIVATE)
                val token = prefs.getString("accessToken", null)
                Log.d(tag, "tokenPresent=${!token.isNullOrEmpty()} tokenPreview=${token?.take(10)}...")

                if (token.isNullOrEmpty()) {
                    _submittedFormState.value =
                        SubmittedFormState.Error("Ïù∏Ï¶ù ÌÜ†ÌÅ∞Ïù¥ ÏóÜÏäµÎãàÎã§. Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.")
                    return@launch
                }

                if (retrofitAPI == null) retrofitAPI = RetrofitObject.getRetrofitService(context)

                val call = retrofitAPI!!.getSubmittedRequestForms(requestId.toInt())
                runCatching { Log.d(tag, "url=${call.request().url}") }

                call.enqueue(object : Callback<RetrofitClient.ApiResponse<SubmittedRequestFormsResponse>> {

                    override fun onResponse(
                        call: Call<RetrofitClient.ApiResponse<SubmittedRequestFormsResponse>>,
                        response: Response<RetrofitClient.ApiResponse<SubmittedRequestFormsResponse>>
                    ) {
                        Log.d(tag, "http code=${response.code()} ok=${response.isSuccessful}")

                        if (!response.isSuccessful) {
                            val errBody = runCatching { response.errorBody()?.string() }.getOrNull()
                            Log.w(tag, "errorBody=${errBody.orEmpty()}")
                            val msg = when (response.code()) {
                                401 -> "Ïù∏Ï¶ùÏù¥ ÌïÑÏöîÌï©ÎãàÎã§. Îã§Ïãú Î°úÍ∑∏Ïù∏Ìï¥Ï£ºÏÑ∏Ïöî."
                                403 -> "Ï†ëÍ∑º Í∂åÌïúÏù¥ ÏóÜÏäµÎãàÎã§."
                                404 -> "Ïã†Ï≤≠ÏÑúÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§. (requestId=$requestId)"
                                else -> "API Ìò∏Ï∂ú Ïã§Ìå®: ${response.code()}"
                            }
                            _submittedFormState.value = SubmittedFormState.Error(msg)
                            return
                        }

                        val body = response.body()
                        val success = body?.success
                        Log.d(tag, "resultType=${body?.resultType} hasSuccess=${success != null}")

                        if (body?.resultType != "SUCCESS" || success == null) {
                            _submittedFormState.value =
                                SubmittedFormState.Error("Ïã†Ï≤≠ÏÑú Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò§ÏßÄ Î™ªÌñàÏäµÎãàÎã§.")
                            return
                        }


                        runCatching {
                            val pretty = GsonBuilder().setPrettyPrinting().create()
                            Log.d(tag, "API body(json) =\n${pretty.toJson(body)}")           // ÎûòÌçº Ìè¨Ìï® Ï†ÑÏ≤¥
                            Log.d(tag, "success body(json) =\n${pretty.toJson(success)}")   // ÏàúÏàò success ÌéòÏù¥Î°úÎìú
                        }

                        // (ÎÇòÎ®∏ÏßÄ Í∏∞Ï°¥ ÏÉÅÏÑ∏ Î°úÍ∑∏/Îß§Ìïë Í∑∏ÎåÄÎ°ú)
                        Log.d(tag, "requestId=${success.requestId} status=${success.status} displayTime=${success.displayTime}")
                        Log.d(tag, "commission: id=${success.commission.id} title=${success.commission.title}")
                        Log.d(tag, "artist: id=${success.artist.id} nickname=${success.artist.nickname} profile=${success.artist.profileImageUrl}")

                        val text = success.requestContent?.text
                        val images = success.requestContent?.images.orEmpty().sortedBy { it.orderIndex }
                        Log.d(tag, "requestContent.text=${text ?: "(null)"}")
                        Log.d(tag, "requestContent.images size=${images.size}")
                        images.forEachIndexed { i, img ->
                            Log.v(tag, "img[$i] id=${img.id} order=${img.orderIndex} url=${img.imageUrl}")
                        }

                        val schemaItems = mutableListOf<FormItem>()
                        val answerMap = mutableMapOf<String, Any>()

                        success.formResponses.forEachIndexed { idx, r ->
                            val label = (r.questionLabel ?: "Ìï≠Î™© ${idx + 1}").trim()
                            schemaItems += FormItem(
                                id = r.questionId.toIntOrNull() ?: (idx + 1),
                                label = label,
                                type = "text",
                                options = emptyList()
                            )
                            if (!r.answer.isNullOrBlank()) answerMap[label] = r.answer!!
                        }

                        val noteLabel = "Ïã†Ï≤≠ ÎÇ¥Ïö©"
                        val imageLabel = "Ï∞∏Í≥† Ïù¥ÎØ∏ÏßÄ"
                        schemaItems += FormItem(id = 9001, label = noteLabel, type = "textarea", options = emptyList())
                        schemaItems += FormItem(id = 9002, label = imageLabel, type = "file", options = emptyList())

                        text?.takeIf { it.isNotBlank() }?.let { answerMap[noteLabel] = it }
                        val imageUrls = images.map { it.imageUrl }.filter { it.isNotBlank() }
                        if (imageUrls.isNotEmpty()) {
                            answerMap[imageLabel] = imageUrls
                            answerMap["images"] = imageUrls
                            answerMap["imageUrls"] = imageUrls
                        }

                        Log.d(tag, "mapped schemaItems=${schemaItems.size}, answerKeys=${answerMap.keys.joinToString()}")

                        _submittedFormSchemaUi.value = schemaItems
                        _submittedFormAnswerUi.value = answerMap
                        _submittedFormState.value = SubmittedFormState.Idle
                    }

                    override fun onFailure(
                        call: Call<RetrofitClient.ApiResponse<SubmittedRequestFormsResponse>>,
                        t: Throwable
                    ) {
                        Log.e(tag, "onFailure: ${t.message}", t)
                        _submittedFormState.value = SubmittedFormState.Error("ÎÑ§Ìä∏ÏõåÌÅ¨ Ïò§Î•ò: ${t.message}")
                    }
                })
            } catch (e: Exception) {
                Log.e(tag, "exception: ${e.message}", e)
                _submittedFormState.value = SubmittedFormState.Error("ÎÑ§Ìä∏ÏõåÌÅ¨ Ïò§Î•ò: ${e.message}")
            }
        }
    }

    // ---------------------------------------------------------------------
    // success.formSchema.fields(JSON) ‚Üí UI FormItem Î¶¨Ïä§Ìä∏ Î≥ÄÌôò
    // ---------------------------------------------------------------------
    private fun mapSchemaFieldsToFormItems(fieldsJson: JsonArray?): List<FormItem> {
        if (fieldsJson == null || fieldsJson.size() == 0) {
            Log.w(TAG, "mapSchemaFieldsToFormItems: fieldsJson is null/empty")
            return emptyList()
        }

        val result = mutableListOf<FormItem>()
        fieldsJson.forEachIndexed { index, elem ->
            val field = elem.asJsonObject
            val idStr = field.get("id")?.asString ?: "${index + 1}"
            val id = idStr.toIntOrNull() ?: (index + 1)
            val type = field.get("type")?.asString ?: "text"
            val label = field.get("label")?.asString ?: "Ìï≠Î™© ${index + 1}"

            val optionsJson = field.get("options") as? JsonArray
            val options: List<OptionItem> =
                if (optionsJson != null && optionsJson.size() > 0) {
                    optionsJson.map { optEl ->
                        val optObj = optEl.asJsonObject
                        val base = optObj.get("label")?.asString ?: ""
                        val addPrice = optObj.get("additionalPrice")?.asInt ?: 0
                        val finalLabel = if (addPrice > 0) "$base (+${addPrice}P)" else base
                        OptionItem(finalLabel)
                    }
                } else emptyList()

            result += FormItem(
                id = id,
                label = label,
                type = type,
                options = options
            )
        }
        return result
    }
}

/* -------------------------------------------
 * States
 * ------------------------------------------- */
sealed class CommissionFormState {
    object Loading : CommissionFormState()
    data class Success(val data: CommissionFormResponse) : CommissionFormState()
    data class Error(val message: String) : CommissionFormState()
}

sealed class ImageUploadState {
    object Idle : ImageUploadState()
    object Loading : ImageUploadState()
    data class Success(val data: ImageUploadResponse) : ImageUploadState()
    data class Error(val message: String) : ImageUploadState()
}

/** ÏÑ±Í≥µ ÏãúÏóî requestId(String?)Îßå Ï†ÑÎã¨ */
sealed class SubmitState {
    data object Idle : SubmitState()
    data object Loading : SubmitState()
    data class Success(val requestId: String? = null) : SubmitState()
    data class Error(val message: String) : SubmitState()
    data class AlreadySubmitted(val existingRequestId: String) : SubmitState()
}

/** Ï†úÏ∂úÎêú Ïã†Ï≤≠ÏÑú Î≥¥Í∏∞Ïö© ÏÉÅÌÉú */
sealed class SubmittedFormState {
    data object Idle : SubmittedFormState()
    data object Loading : SubmittedFormState()
    data class Success(val data: RetrofitClient.SubmittedFormData) : SubmittedFormState()
    data class Error(val message: String) : SubmittedFormState()
}
