package com.example.commit.ui.search

import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.compose.runtime.*
import androidx.compose.runtime.saveable.rememberSaveable
import androidx.compose.ui.platform.ComposeView
import androidx.fragment.app.Fragment
import androidx.fragment.app.viewModels
import com.example.commit.R
import com.example.commit.connection.dto.CommissionSummary
import com.example.commit.ui.post.FragmentPostScreen
import com.example.commit.ui.request.components.Commission
import com.example.commit.viewmodel.SearchViewModel

class FragmentSearchResult : Fragment() {

    companion object {
        private const val ARG_KEYWORD = "arg_keyword"   // Í≤ÄÏÉâÏ∞ΩÏóê Î≥¥Ïùº ÌÖçÏä§Ìä∏ Í≤ÄÏÉâÏñ¥
        private const val ARG_CATEGORY = "arg_category" // Ïπ©Ïóê Î≥¥Ïùº Ïπ¥ÌÖåÍ≥†Î¶¨

        fun newInstance(keyword: String?, category: String?): FragmentSearchResult {
            return FragmentSearchResult().apply {
                arguments = Bundle().apply {
                    putString(ARG_KEYWORD, keyword)
                    putString(ARG_CATEGORY, category)
                }
            }
        }
    }

    private val viewModel: SearchViewModel by viewModels()

    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        val initialKeyword = arguments?.getString(ARG_KEYWORD)   // ex) "Í≥†ÏñëÏù¥" (ÌÖçÏä§Ìä∏ Í≤ÄÏÉâ)
        val initialCategory = arguments?.getString(ARG_CATEGORY) // ex) "Í∑∏Î¶º" (Ïπ¥ÌÖåÍ≥†Î¶¨ Í≤ÄÏÉâ)

        return ComposeView(requireContext()).apply {
            // FragmentSearchResult.kt (setContent ÎÇ¥Î∂Ä ÌïµÏã¨Îßå)
            setContent {
                // Ï†ÑÎã¨Í∞í
                val initialKeyword = arguments?.getString(ARG_KEYWORD)   // Í≤ÄÏÉâÏñ¥ (Í≤ÄÏÉâÏ∞ΩÏóê ÌëúÏãú)
                val initialCategory = arguments?.getString(ARG_CATEGORY) // Ïπ¥ÌÖåÍ≥†Î¶¨ (Ïπ©Ïóê ÌëúÏãú)
                var showFollowOnly by rememberSaveable { mutableStateOf(false) }

                // Í≤ÄÏÉâÏ∞Ω: ÌÇ§ÏõåÎìú Î™®ÎìúÎ©¥ ÌÇ§ÏõåÎìúÎ°ú ÏãúÏûë, Ïπ¥ÌÖåÍ≥†Î¶¨ Î™®ÎìúÎ©¥ ÎπàÏπ∏
                var searchQuery by rememberSaveable { mutableStateOf(initialKeyword ?: "") }

                // üî∏ FilterButtonRowÏóê Î≥¥Ïó¨Ï§Ñ ÎùºÎ≤®: Ïπ¥ÌÖåÍ≥†Î¶¨ ÏûàÏúºÎ©¥ Í∑∏ Ïù¥Î¶Ñ, ÏóÜÏúºÎ©¥ "Ïπ¥ÌÖåÍ≥†Î¶¨"
                val categoryLabel = initialCategory ?: "Ïπ¥ÌÖåÍ≥†Î¶¨"

                // ‚úÖ Ïπ¥ÌÖåÍ≥†Î¶¨Î°ú ÏßÑÏûÖ Ïãú ÏÑ†ÌÉùÎêú ÏÉÅÌÉúÎ°ú Î≥¥Ïó¨Ï£ºÍ∏∞
                var selectedFilters by rememberSaveable {
                    mutableStateOf(
                        if (!initialCategory.isNullOrBlank()) setOf(categoryLabel) else emptySet()
                    )
                }

                // ViewModel ÏÉÅÌÉú ‚Üí Ïπ¥Îìú Î¶¨Ïä§Ìä∏ Îß§Ìïë
                val resultsDto by viewModel.results.collectAsState()
                val commissions = resultsDto.map { it.toUi() }

                // ÏµúÏ¥à Ìò∏Ï∂ú: ÌÇ§ÏõåÎìú(q) Ïö∞ÏÑ†, ÏóÜÏúºÎ©¥ Ïπ¥ÌÖåÍ≥†Î¶¨(category)
                LaunchedEffect(initialKeyword, initialCategory) {
                    when {
                        !initialKeyword.isNullOrBlank() -> {
                            viewModel.search(requireContext(), q = initialKeyword, category = null, page = 1, limit = 12)
                        }
                        !initialCategory.isNullOrBlank() -> {
                            viewModel.search(requireContext(), q = null, category = initialCategory, page = 1, limit = 12)
                        }
                        else -> requireActivity().onBackPressedDispatcher.onBackPressed()
                    }
                }

                // Í≤ÄÏÉâÏ∞Ω Ïû¨Í≤ÄÏÉâ ‚Üí Ìï≠ÏÉÅ qÎ°ú
                val submitSearch: () -> Unit = {
                    val q = searchQuery.trim()
                    if (q.isNotEmpty()) {
                        viewModel.search(requireContext(), q = q, category = null, page = 1, limit = 12)
                        // Ïû¨Í≤ÄÏÉâÏùÄ ÌÇ§ÏõåÎìú Í∏∞Î∞òÏù¥ÎØÄÎ°ú Ïπ©ÏùÄ ÏÑ†ÌÉù Ìï¥Ï†ú Ïú†ÏßÄ (ÏöîÍµ¨ÏÇ¨Ìï≠ÎåÄÎ°ú Ïπ¥ÌÖåÍ≥†Î¶¨Îßå Ïπ©)
                        selectedFilters = emptySet()
                    }
                }

                SearchResultScreen(
                    // Í≤ÄÏÉâÏ∞Ω Ï†úÏñ¥
                    searchQuery = searchQuery,
                    onSearchQueryChange = { searchQuery = it },
                    onSearchSubmit = submitSearch,

                    // üî∏ FilterButtonRowÏóê ÎÑòÍ∏∏ ÎùºÎ≤®(Ìï≠ÏÉÅ Ïπ¥ÌÖåÍ≥†Î¶¨Îßå, ÏóÜÏúºÎ©¥ "Ïπ¥ÌÖåÍ≥†Î¶¨")
                    keyword = categoryLabel,

                    // üî∏ ÏÑ†ÌÉù ÏÉÅÌÉú: Ïπ¥ÌÖåÍ≥†Î¶¨ ÏßÑÏûÖÏù¥Î©¥ setOf(Ïπ¥ÌÖåÍ≥†Î¶¨), ÏïÑÎãàÎ©¥ ÎπàÏÖã
                    selectedFilters = selectedFilters,
                    onFilterClick = { label ->
                        // ÌÜ†Í∏Ä (Ï†ïÎ†¨/Í∞ÄÍ≤© Í∞ôÏùÄ Îã§Î•∏ ÎùºÎ≤®ÎèÑ Ìï®Íªò Í¥ÄÎ¶¨)
                        selectedFilters = if (selectedFilters.contains(label)) {
                            selectedFilters - label
                        } else {
                            selectedFilters + label
                        }
                    },
                    onFilterIconClick = { /* TODO: Î∞îÌÖÄÏãúÌä∏ Ïó¥Í∏∞ */ },

                    // ÎÇòÎ®∏ÏßÄ Í∑∏ÎåÄÎ°ú
                    commissions = commissions,
                    showFollowOnly = showFollowOnly,
                    onFollowToggle = {  checked ->
                        showFollowOnly = checked },
                    onBackClick = { requireActivity().onBackPressedDispatcher.onBackPressed() },
                    onClearClick = { searchQuery = "" },
                    onHomeClick = { /* TODO */ },
                    onCommissionClick = { item ->
                        parentFragmentManager.beginTransaction()
                            .replace(R.id.Nav_Frame, FragmentPostScreen.newInstance(item.commissionId))
                            .addToBackStack(null)
                            .commit()
                    }
                )
            }
            }
        }
    }


// DTO ‚Üí UI Îß§Ìçº
private fun CommissionSummary.toUi(): Commission =
    Commission(
        commissionId = id,
        nickname = artist.nickname,
        title = title,
        tags = tags.map { "#${it.name}" }
    )
